/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"
    include "definitions.h"
    include "stdio.h"
    include "string.h"
    
    untrusted {
        void ocall_print([in, string] const char *str);
        void ocall_respond([in,size=message_size] uint8_t* message, size_t message_size, [in, size=16] uint8_t* gcm_mac);//TODO
        void ocall_read_block(int structureId, int index, int blockSize, [out, size=blockSize] void *buffer); //read in to buffer
        //void ocall_read_block(int structureId, int index, int blockSize, [user_check] void *buffer); //read in to buffer, maybe this will perform better?
        void ocall_write_block(int structureId, int index, int blockSize, [in, size=blockSize] void *buffer); //write out from buffer
        void ocall_newStructure(int newId, Obliv_Type type, int size, TABLE_TYPE tableType); //enclave asks app to allocate new structure
        void ocall_deleteStructure(int structureId);
		void ocall_write_file([in, size=dsize] const void *src, int dsize, int tableSize);
		void ocall_open_read(int tableSize);
		void ocall_read_file([out, size=dsize] void *dest, int dsize);
		void ocall_make_name([out, size=20]void *name, int tableSize);
		void ocall_showquery(int structureId, int querytype);
		void ocall_settablekey([user_check]unsigned char* obliv_key, int keylen);
		void ocall_outchar(int index, unsigned char c);
    };

    trusted {
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        public sgx_status_t put_secret_data(sgx_ra_context_t context,  
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* gcm_mac);
        public sgx_status_t send_msg([in,size=message_size] uint8_t* message, size_t message_size, [in, count=16] uint8_t* gcm_mac);//TODO        
        public sgx_status_t total_init();
		public sgx_status_t run_tests();
		public sgx_status_t setupPerformanceTest(int structNum, int size, Obliv_Type type);
		public sgx_status_t testLinScanBlockPerformance(int structNum, int queryIndex, [out, size=respLen]Linear_Scan_Block* b, int respLen);
		public sgx_status_t testLinScanBlockUnencryptedPerformance(int structNum, int queryIndex, [out, size=respLen]Linear_Scan_Block* b, int respLen);
		public sgx_status_t testLinScanBlockWritePerformance(int structNum, int queryIndex, [out, size=respLen]Linear_Scan_Block* b, int respLen);
		public sgx_status_t testLinScanBlockUnencryptedWritePerformance(int structNum, int queryIndex, [out, size=respLen]Linear_Scan_Block* b, int respLen);
		public sgx_status_t testOramPerformance(int structNum, int queryIndex, [out, size=respLen]Oram_Block* b, int respLen);	
		public sgx_status_t testOramSafePerformance(int structNum, int queryIndex, [out, size=respLen]Oram_Block* b, int respLen);	
		public sgx_status_t testOpOram();
		public sgx_status_t oramDistribution(int structureId);
		public sgx_status_t free_oram(int structureId);
		public sgx_status_t testMemory();
		
		//I got lazy here
		public int rowMatchesCondition(Condition c, [user_check]uint8_t* row, Schema s);
		public int createTable([user_check]Schema *schema, [user_check]char* tableName, int nameLen, Obliv_Type type, int numberOfRows, [user_check]int* structureId);
		public int growStructure(int structureId);
		public int getTableId([user_check]char *tableName);
		public int renameTable([user_check]char *oldTableName, [user_check]char *newTableName);
		public int insertRow([user_check]char* tableName, [user_check]uint8_t* row, int key);
		public int insertIndexRowFast([user_check]char* tableName, [user_check]uint8_t* row, int key);
		public int insertLinRowFast([user_check]char* tableName, [user_check]uint8_t* row);
		public int deleteRow([user_check]char* tableName, int key);
		public int deleteRows([user_check]char* tableName, Condition c, int startKey, int endKey);
		public int updateRows([user_check]char* tableName, Condition c, int colChoice, [user_check]uint8_t* colVal, int startKey, int endKey);
		public int selectRows([user_check]char* tableName, int colChoice, Condition c, int aggregate, int groupCol, int algChoice, int intermediate);
		public int highCardLinGroupBy([user_check]char* tableName, int colChoice, Condition c, int aggregate, int groupCol, int algChoice, int intermediate);
		public int printTable([user_check]char* tableName);
		public int printTableCheating([user_check]char* tableName);
		public int createTestTable([user_check]char* tableName, int numRows);
		public Schema getTableSchema([user_check]char *tableName);
		public int deleteTable([user_check]char *tableName);
		public int joinTables([user_check]char* tableName1, [user_check]char* tableName2, int joinCol1, int joinCol2, int startKey, int endKey);
		public int createTestTableIndex([user_check]char* tableName, int numberOfRows);
		public int indexSelect([user_check]char* tableName, int colChoice, Condition c, int aggregate, int groupCol, int algChoice, int key_start, int key_end, int intermediate);	
		public int saveIndexTable([user_check]char* tableName, int tableSize);
		public int loadIndexTable(int tableSize);	
		
		//exposing these just for building the tables with real world data
		public int opOneLinearScanBlock(int structureId, int index, [user_check]Linear_Scan_Block* block, int write);
		public int incrementNumRows(int structureId);
		public int getNumRows(int structureId);
		public int decryptOneBlock([user_check]Encrypted_Linear_Scan_Block* block, int tableid);
		public int ReopenTable(int structureId, [user_check]Schema* schema, [user_check]unsigned char* key, int rownum, [user_check]char* tbname, int tbnamelen, Obliv_Type type);
    };
};
